{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\bruno\\\\Documents\\\\GitHub\\\\react-projects\\\\movie-app\\\\frontend\\\\src\\\\components\\\\layout\\\\tabs\\\\TopMoviesTab.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { IMG_BASE_URL } from '../../strings';\nimport MyMovies from '../../../utils/MyMovies';\nimport ConfirmationMessage from '../ConfirmationMessage';\nimport Form from 'react-bootstrap/Form';\nexport default function TopMoviesTab(props) {\n  _s();\n\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  const [myMovies, setMyMovies] = useState([]);\n  const [displayMessage, setDisplayMessage] = useState({\n    display: false,\n    type: '',\n    content: ''\n  });\n  const [typeDisplayMessage, setTypeDisplayMessage] = useState('');\n  const [contentDisplayMessage, setContentDisplayMessage] = useState('');\n  const [checkedBox, setCheckedBox] = useState(false);\n  let movies = props.movies;\n  useEffect(() => {\n    if (myMovies.length == 0) setMyMovies(MyMovies.getMoviesLocalStorage(movies));\n  }, [myMovies]);\n\n  const determineColorRank = index => {\n    const style = {\n      fontSize: '30px',\n      fontWeight: '700',\n      backgroundColor: 'transparent',\n      borderRadius: '10px',\n      padding: '20px 30px'\n    };\n\n    switch (index) {\n      case 1:\n        // gold\n        style.backgroundColor = '#CFB53B';\n        return style;\n\n      case 2:\n        // silver\n        style.backgroundColor = '#B4B4B4';\n        return style;\n\n      case 3:\n        // bronze\n        style.backgroundColor = '#8C7853';\n        return style;\n\n      default:\n        return style;\n    }\n  };\n\n  const onChangeDropdownValue = e => {\n    let val = e.target.value;\n\n    switch (val) {\n      case 'h-score':\n        applyFilter('t-score');\n        break;\n\n      case 'l-score':\n        applyFilter('b-score');\n        break;\n\n      case 'h-votes':\n        applyFilter('t-votes');\n        break;\n\n      case 'l-votes':\n        applyFilter('b-votes');\n        break;\n\n      case 'newest':\n        applyFilter('t-date');\n        break;\n\n      case 'oldest':\n        applyFilter('b-date');\n        break;\n    }\n  };\n\n  const applyFilter = type => {\n    try {\n      movies.sort((a, b) => {\n        if (type.includes('score')) {\n          if (type.includes('t')) {\n            // filter by descending order\n            return b.vote_average - a.vote_average;\n          } else {\n            // filter by ascending order \n            return a.vote_average - b.vote_average;\n          }\n        } else if (type.includes('votes')) {\n          if (type.includes('b')) {\n            // filter by descending order\n            return a.vote_count - b.vote_count;\n          } else {\n            // filter by ascending order \n            return b.vote_count - a.vote_count;\n          }\n        } else if (type.includes('date')) {\n          if (type.includes('b')) {\n            // filter by descending order\n            return new Date(a.release_date) - new Date(b.release_date);\n          } else {\n            // filter by ascending order \n            return new Date(b.release_date) - new Date(a.release_date);\n          }\n        }\n      });\n      showMessage('success', 'Successfully filtered!');\n    } catch (e) {\n      showMessage('failure', e);\n    }\n  };\n\n  const showMessage = (type, content) => {\n    setDisplayMessage({\n      display: true,\n      type: type,\n      content: content\n    });\n  }; // Checks if state message confirmation is being displayed and sets display to false after 3 seconds\n\n\n  const checkIfDisplayMesssageChanged = () => {\n    if (displayMessage) {\n      const timer = setTimeout(() => {\n        setDisplayMessage(false);\n      }, 2000);\n      return () => clearTimeout(timer);\n    }\n  }; // TODO: fix state update to refresh table with only myMovies\n\n\n  const handleCheckBoxClick = () => {\n    if (!checkedBox) {\n      setCheckedBox(true);\n      movies = [];\n      myMovies.map(myMovie => {\n        movies.push(myMovie.movie.movieItem);\n      });\n    } else {\n      setCheckedBox(false);\n      movies = props.movies;\n    }\n\n    console.log(movies);\n    forceUpdate();\n  };\n\n  checkIfDisplayMesssageChanged();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [displayMessage ? /*#__PURE__*/_jsxDEV(ConfirmationMessage, {\n        type: typeDisplayMessage,\n        message: contentDisplayMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 35\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"heading-page\",\n        children: \"Top Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"filter\",\n          style: {\n            color: 'white'\n          },\n          children: \"Filter by:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 84\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"filter\",\n          id: \"filter\",\n          className: \"select\",\n          onChange: onChangeDropdownValue,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: true,\n            children: \"Select option\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"h-score\",\n            children: \"Highest score\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"l-score\",\n            children: \"Lowest score\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"m-votes\",\n            children: \"Most votes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"l-votes\",\n            children: \"Least votes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"newest\",\n            children: \"Newest\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"oldest\",\n            children: \"Oldest\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n          inline: true,\n          label: \"only display movies in list\",\n          className: \"ml-3\",\n          style: {\n            color: 'white'\n          },\n          type: \"checkbox\",\n          defaultChecked: checkedBox,\n          onClick: handleCheckBoxClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table-my-list mt-4 pb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"text-center\",\n              style: {\n                width: '10%'\n              },\n              children: \"Rank\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"text-center\",\n              style: {\n                width: '60%'\n              },\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"text-center\",\n              style: {\n                width: '10%'\n              },\n              children: \"Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"text-center\",\n              style: {\n                width: '10%'\n              },\n              children: \"Your Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"text-center\",\n              style: {\n                width: '10%'\n              },\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: movies.map((movie, index) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: determineColorRank(index + 1),\n                  children: index + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 73\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: IMG_BASE_URL + movie.poster_path,\n                  height: 90,\n                  style: {\n                    paddingLeft: '10px'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"row\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      marginLeft: '30px'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                      style: {\n                        fontSize: '20px'\n                      },\n                      children: movie.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 187,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 187,\n                      columnNumber: 104\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: movie.release_date\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 188,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 188,\n                      columnNumber: 90\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [movie.vote_count, \" votes\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 189,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 186,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-center\",\n                children: movie.vote_average\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-center\",\n                children: myMovies.map(myMovie => {\n                  if (myMovie.movie.movieItem.id === movie.id) {\n                    return myMovie.userStats.rating.charAt(1);\n                  }\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"text-center\",\n                children: myMovies.map(myMovie => {\n                  if (myMovie.movie.movieItem.id === movie.id) {\n                    return myMovie.userStats.status;\n                  }\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 45\n              }, this)]\n            }, movie.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 41\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TopMoviesTab, \"w72noW69OmBlbGD8O1fxD4IP8HQ=\");\n\n_c = TopMoviesTab;\n\nvar _c;\n\n$RefreshReg$(_c, \"TopMoviesTab\");","map":{"version":3,"sources":["C:/Users/bruno/Documents/GitHub/react-projects/movie-app/frontend/src/components/layout/tabs/TopMoviesTab.js"],"names":["React","useEffect","useState","IMG_BASE_URL","MyMovies","ConfirmationMessage","Form","TopMoviesTab","props","updateState","forceUpdate","useCallback","myMovies","setMyMovies","displayMessage","setDisplayMessage","display","type","content","typeDisplayMessage","setTypeDisplayMessage","contentDisplayMessage","setContentDisplayMessage","checkedBox","setCheckedBox","movies","length","getMoviesLocalStorage","determineColorRank","index","style","fontSize","fontWeight","backgroundColor","borderRadius","padding","onChangeDropdownValue","e","val","target","value","applyFilter","sort","a","b","includes","vote_average","vote_count","Date","release_date","showMessage","checkIfDisplayMesssageChanged","timer","setTimeout","clearTimeout","handleCheckBoxClick","map","myMovie","push","movie","movieItem","console","log","color","width","poster_path","paddingLeft","marginLeft","title","id","userStats","rating","charAt","status"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport {IMG_BASE_URL} from '../../strings'\r\nimport MyMovies from '../../../utils/MyMovies'\r\nimport ConfirmationMessage from '../ConfirmationMessage';\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nexport default function TopMoviesTab(props) {\r\n    const [, updateState] = React.useState();\r\n    const forceUpdate = React.useCallback(() => updateState({}), []);\r\n    const [myMovies, setMyMovies] = useState([]);\r\n    const [displayMessage, setDisplayMessage] = useState({\r\n        display: false,\r\n        type: '',\r\n        content: ''\r\n    });\r\n    const [typeDisplayMessage, setTypeDisplayMessage] = useState('');\r\n    const [contentDisplayMessage, setContentDisplayMessage] = useState('');\r\n    const [checkedBox, setCheckedBox] = useState(false);\r\n    let movies = props.movies;\r\n\r\n    useEffect(() => {\r\n        if (myMovies.length == 0) setMyMovies(MyMovies.getMoviesLocalStorage(movies));\r\n    }, [myMovies])\r\n\r\n    const determineColorRank = (index) => {\r\n        const style = {\r\n            fontSize: '30px', \r\n            fontWeight: '700',\r\n            backgroundColor: 'transparent',\r\n            borderRadius: '10px',\r\n            padding: '20px 30px'\r\n        }\r\n\r\n        switch (index){\r\n            case 1: // gold\r\n                style.backgroundColor = '#CFB53B';\r\n                return style;\r\n            case 2: // silver\r\n                style.backgroundColor = '#B4B4B4';\r\n                return style;\r\n            case 3: // bronze\r\n                style.backgroundColor = '#8C7853';\r\n                return style;  \r\n            default:\r\n                return style;\r\n        }\r\n    }\r\n\r\n    const onChangeDropdownValue = (e) => {\r\n        let val = e.target.value\r\n        switch (val){\r\n            case 'h-score':\r\n                applyFilter('t-score');\r\n                break;\r\n            case 'l-score':\r\n                applyFilter('b-score');\r\n                break;\r\n            case 'h-votes':\r\n                applyFilter('t-votes')\r\n                break;\r\n            case 'l-votes':\r\n                applyFilter('b-votes');\r\n                break;\r\n            case 'newest':\r\n                applyFilter('t-date');\r\n                break;\r\n            case 'oldest':\r\n                applyFilter('b-date');\r\n                break;\r\n        }\r\n    }\r\n\r\n    const applyFilter = (type) => {\r\n        try {\r\n            movies.sort((a,b) => {\r\n                if (type.includes('score')){\r\n                    if (type.includes('t')){\r\n                        // filter by descending order\r\n                        return b.vote_average - a.vote_average;\r\n                    } else {\r\n                        // filter by ascending order \r\n                        return a.vote_average - b.vote_average;\r\n                    }\r\n                } else if (type.includes('votes')){\r\n                    if (type.includes('b')){\r\n                        // filter by descending order\r\n                        return a.vote_count - b.vote_count;\r\n                    } else {\r\n                        // filter by ascending order \r\n                        return b.vote_count - a.vote_count;\r\n                    }\r\n                } else if (type.includes('date')){\r\n                    if (type.includes('b')){\r\n                         // filter by descending order\r\n                         return new Date(a.release_date) - new Date(b.release_date);\r\n                    } else {\r\n                        // filter by ascending order \r\n                        return new Date(b.release_date) - new Date(a.release_date);\r\n                    }\r\n                }\r\n            })\r\n            showMessage('success', 'Successfully filtered!');\r\n        } catch (e){\r\n            showMessage('failure', e);\r\n        }\r\n    }\r\n\r\n    const showMessage = (type, content) => {\r\n        setDisplayMessage({\r\n            display: true,\r\n            type: type,\r\n            content: content\r\n        });\r\n    }\r\n\r\n    // Checks if state message confirmation is being displayed and sets display to false after 3 seconds\r\n    const checkIfDisplayMesssageChanged = () => {\r\n        if (displayMessage){\r\n            const timer = setTimeout(() => {\r\n                setDisplayMessage(false);\r\n            }, 2000);\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }\r\n\r\n    // TODO: fix state update to refresh table with only myMovies\r\n    const handleCheckBoxClick = () => {\r\n        if (!checkedBox) {\r\n            setCheckedBox(true);\r\n            movies = [];\r\n            myMovies.map(myMovie => {\r\n                movies.push(myMovie.movie.movieItem)\r\n            })\r\n        } else  {\r\n            setCheckedBox(false);\r\n            movies = props.movies;\r\n        }\r\n        console.log(movies)\r\n        forceUpdate();\r\n    }\r\n    \r\n    checkIfDisplayMesssageChanged();\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container\">\r\n                {displayMessage ? <ConfirmationMessage type={typeDisplayMessage} message={contentDisplayMessage} /> : null}\r\n                <h1 className=\"heading-page\">Top Movies</h1>\r\n\r\n                <div>\r\n                    <label for=\"filter\" style={{color: 'white'}}>Filter by:</label><br/>\r\n                    <select name=\"filter\" id=\"filter\" className=\"select\" onChange={onChangeDropdownValue}>\r\n                        <option disabled>Select option</option>\r\n                        <option value=\"h-score\">Highest score</option>\r\n                        <option value=\"l-score\">Lowest score</option>\r\n                        <option value=\"m-votes\">Most votes</option>\r\n                        <option value=\"l-votes\">Least votes</option>\r\n                        <option value=\"newest\">Newest</option>\r\n                        <option value=\"oldest\">Oldest</option>\r\n                    </select>\r\n                    <Form.Check inline label=\"only display movies in list\" className=\"ml-3\" style={{color: 'white'}} type=\"checkbox\"\r\n                    defaultChecked={checkedBox} onClick={handleCheckBoxClick} />\r\n                </div>\r\n\r\n                <table className=\"table-my-list mt-4 pb-4\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"text-center\" style={{width: '10%'}}>Rank</th>\r\n                                <th></th>\r\n                                <th className=\"text-center\" style={{width: '60%'}}>Title</th>\r\n                                <th className=\"text-center\" style={{width: '10%'}}>Score</th>\r\n                                <th className=\"text-center\" style={{width: '10%'}}>Your Score</th>\r\n                                <th className=\"text-center\" style={{width: '10%'}}>Status</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                movies.map((movie, index) => {\r\n                                    return (\r\n                                        <tr key={movie.id}>\r\n                                            <td className=\"text-center\"><span style={determineColorRank(index + 1)}>{index + 1}</span></td>\r\n                                            <td><img src={IMG_BASE_URL + movie.poster_path} height={90}\r\n                                                    style={{paddingLeft: '10px'}}/></td>\r\n                                            <td>\r\n                                                <div className=\"row\">\r\n                                                    <div style={{marginLeft: '30px'}}>\r\n                                                        <b style={{fontSize: '20px'}}>{movie.title}</b><br/>\r\n                                                        <span>{movie.release_date}</span><br/>\r\n                                                        <span>{movie.vote_count} votes</span>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </td>\r\n                                            <td className=\"text-center\">{movie.vote_average}</td>\r\n                                            <td className=\"text-center\">\r\n                                                {myMovies.map(myMovie => {\r\n                                                    if (myMovie.movie.movieItem.id === movie.id) {\r\n                                                        return (myMovie.userStats.rating.charAt(1))\r\n                                                    }\r\n                                                })}\r\n                                            </td>\r\n                                            <td className=\"text-center\">\r\n                                                {myMovies.map(myMovie => {\r\n                                                    if (myMovie.movie.movieItem.id === movie.id) {\r\n                                                        return (myMovie.userStats.status);\r\n                                                    }\r\n                                                })}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}