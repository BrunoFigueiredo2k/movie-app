{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\bruno\\\\Documents\\\\GitHub\\\\react-projects\\\\movie-app\\\\frontend\\\\src\\\\components\\\\layout\\\\VerticallyCenteredModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport ModalBody from \"react-bootstrap/ModalBody\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport ModalFooter from \"react-bootstrap/ModalFooter\";\nimport ModalTitle from \"react-bootstrap/ModalTitle\";\nimport Button from 'react-bootstrap/Button';\nimport uuidv4 from 'uuid/v4';\nimport Form from 'react-bootstrap/Form';\nimport AlertMessage from './AlertMessage';\nimport { ALERT_POSITIVE_ADDED_CONTENT, watchStatus, ratings, COLORS_BORDER_LEFT_RATINGS, COLORS_BORDER_LEFT_STATUS, ALERT_WARNING_ADDED_CONTENT } from '../strings';\nimport { getCurrentDate } from '../utils';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nexport default function VerticallyCenteredModal(props) {\n  _s();\n\n  const [rating, setRating] = useState('Select your rating');\n  const [status, setStatus] = useState('Watching');\n  const [addedToList, setAddedToList] = useState(false);\n  const [detailsAlertMessage, setDetailsAlertMessage] = useState();\n\n  const addMovieToList = e => {\n    const movieItem = props.movie;\n    const movieObject = {\n      id: uuidv4(),\n      movie: {\n        movieItem\n      },\n      userStats: {\n        rating,\n        status\n      },\n      date: getCurrentDate()\n    };\n    let prevMovies = JSON.parse(localStorage.getItem(props.movie.id)) || []; // If check on whether movie is in list returns false then display warning Alert and false else push to localstorage\n\n    if (!isMovieInList(prevMovies, movieItem)) {\n      setDetailsAlertMessage({\n        hideBtn: {\n          display: true,\n          route: '/movies'\n        },\n        content: ALERT_WARNING_ADDED_CONTENT,\n        variant: 'danger'\n      });\n    } else {\n      setDetailsAlertMessage({\n        hideBtn: {\n          display: true,\n          route: '/movies'\n        },\n        content: ALERT_POSITIVE_ADDED_CONTENT,\n        variant: 'success'\n      }); // Push movie to localstorage\n\n      prevMovies.push(movieObject);\n      localStorage.setItem(props.movie.id, JSON.stringify(prevMovies));\n    }\n\n    setAddedToList(true);\n  };\n\n  const isMovieInList = (storedMovies, toAddMovie) => {\n    let inList;\n    storedMovies.some(movie => {\n      if (movie.movie.movieItem.id === toAddMovie.id) {\n        inList = true;\n        return true; // break out of loop\n      } else {\n        inList = false;\n      }\n    });\n\n    if (inList) {\n      return false;\n    } else {\n      return true;\n    }\n  }; // Returns dropdown item with corresponding border left color\n\n\n  const setColorDropdownItems = (value, type) => {\n    let i;\n\n    switch (type) {\n      case 'rating':\n        for (i = 0; i < ratings.length; i++) {\n          switch (value) {\n            case ratings[i]:\n              return /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                style: {\n                  borderLeft: COLORS_BORDER_LEFT_RATINGS[i]\n                },\n                eventKey: value,\n                children: value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 36\n              }, this);\n          }\n        }\n\n        break;\n\n      case 'status':\n        for (i = 0; i < watchStatus.length; i++) {\n          switch (value) {\n            case watchStatus[i]:\n              return /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                style: {\n                  borderLeft: COLORS_BORDER_LEFT_STATUS[i]\n                },\n                eventKey: value,\n                children: value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 36\n              }, this);\n          }\n        }\n\n    }\n  }; // Handle setting state of dropdown items\n\n\n  const handleSelectRating = e => {\n    setRating(e);\n  };\n\n  const handleSelectStatus = e => {\n    setStatus(e);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !addedToList ? /*#__PURE__*/_jsxDEV(Modal, { ...props,\n      size: \"lg\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(ModalTitle, {\n          id: \"contained-modal-title-vcenter\",\n          children: [\"Add \", props.movie.original_title, \" to your list?\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Give your rating\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(DropdownButton, {\n            alignRight: true,\n            title: rating,\n            id: \"dropdown-menu-align-right\",\n            onSelect: handleSelectRating,\n            children: ratings.map(rating => setColorDropdownItems(rating, 'rating'))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Watch status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(DropdownButton, {\n            alignRight: true,\n            title: status,\n            id: \"dropdown-menu-align-right\",\n            onSelect: handleSelectStatus,\n            children: watchStatus.map(status => setColorDropdownItems(status, 'status'))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: addMovieToList,\n          variant: \"success\",\n          children: \"Add to list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Modal, { ...props,\n      size: \"lg\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      children: /*#__PURE__*/_jsxDEV(AlertMessage, {\n        details: detailsAlertMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n\n_s(VerticallyCenteredModal, \"Os89obrnETZjiKP0V3x1UjAGGCg=\");\n\n_c = VerticallyCenteredModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"VerticallyCenteredModal\");","map":{"version":3,"sources":["C:/Users/bruno/Documents/GitHub/react-projects/movie-app/frontend/src/components/layout/VerticallyCenteredModal.js"],"names":["React","useState","Modal","ModalBody","ModalHeader","ModalFooter","ModalTitle","Button","uuidv4","Form","AlertMessage","ALERT_POSITIVE_ADDED_CONTENT","watchStatus","ratings","COLORS_BORDER_LEFT_RATINGS","COLORS_BORDER_LEFT_STATUS","ALERT_WARNING_ADDED_CONTENT","getCurrentDate","DropdownButton","Dropdown","VerticallyCenteredModal","props","rating","setRating","status","setStatus","addedToList","setAddedToList","detailsAlertMessage","setDetailsAlertMessage","addMovieToList","e","movieItem","movie","movieObject","id","userStats","date","prevMovies","JSON","parse","localStorage","getItem","isMovieInList","hideBtn","display","route","content","variant","push","setItem","stringify","storedMovies","toAddMovie","inList","some","setColorDropdownItems","value","type","i","length","borderLeft","handleSelectRating","handleSelectStatus","original_title","map"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport ModalBody from \"react-bootstrap/ModalBody\";\r\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\r\nimport ModalFooter from \"react-bootstrap/ModalFooter\";\r\nimport ModalTitle from \"react-bootstrap/ModalTitle\";\r\nimport Button from 'react-bootstrap/Button'\r\nimport uuidv4 from 'uuid/v4';\r\nimport Form from 'react-bootstrap/Form'\r\nimport AlertMessage from './AlertMessage'\r\nimport {\r\n    ALERT_POSITIVE_ADDED_CONTENT,\r\n    watchStatus,\r\n    ratings,\r\n    COLORS_BORDER_LEFT_RATINGS,\r\n    COLORS_BORDER_LEFT_STATUS,\r\n    ALERT_WARNING_ADDED_CONTENT\r\n} from '../strings'\r\nimport {getCurrentDate} from '../utils'\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function VerticallyCenteredModal(props) {\r\n    const [rating, setRating] = useState('Select your rating')\r\n    const [status, setStatus] = useState('Watching')\r\n    const [addedToList, setAddedToList] = useState(false)\r\n    const [detailsAlertMessage, setDetailsAlertMessage] = useState()\r\n\r\n    const addMovieToList = (e) => {\r\n        const movieItem = props.movie;\r\n        const movieObject = {id: uuidv4(), movie: {movieItem}, userStats: {rating, status}, date: getCurrentDate()}\r\n        let prevMovies = JSON.parse(localStorage.getItem(props.movie.id)) || [];\r\n\r\n        // If check on whether movie is in list returns false then display warning Alert and false else push to localstorage\r\n        if (!isMovieInList(prevMovies, movieItem)) {\r\n            setDetailsAlertMessage({\r\n                hideBtn: {display: true, route: '/movies'},\r\n                content: ALERT_WARNING_ADDED_CONTENT,\r\n                variant: 'danger'\r\n            })\r\n        } else {\r\n            setDetailsAlertMessage({\r\n                hideBtn: {display: true, route: '/movies'},\r\n                content: ALERT_POSITIVE_ADDED_CONTENT,\r\n                variant: 'success'\r\n            })\r\n            // Push movie to localstorage\r\n            prevMovies.push(movieObject);\r\n            localStorage.setItem(props.movie.id, JSON.stringify(prevMovies));\r\n        }\r\n\r\n        setAddedToList(true)\r\n    }\r\n\r\n    const isMovieInList = (storedMovies, toAddMovie) => {\r\n        let inList;\r\n        storedMovies.some(movie => {\r\n            if (movie.movie.movieItem.id === toAddMovie.id) {\r\n                inList = true\r\n                return true // break out of loop\r\n            } else {\r\n                inList = false\r\n            }\r\n        })\r\n\r\n        if (inList) {\r\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n    }\r\n\r\n    // Returns dropdown item with corresponding border left color\r\n    const setColorDropdownItems = (value, type) => {\r\n        let i;\r\n        switch (type) {\r\n            case 'rating':\r\n                for (i = 0; i < ratings.length; i++) {\r\n                    switch (value) {\r\n                        case ratings[i]:\r\n                            return <Dropdown.Item style={{borderLeft: COLORS_BORDER_LEFT_RATINGS[i]}}\r\n                                                  eventKey={value}>{value}</Dropdown.Item>\r\n                    }\r\n                }\r\n                break;\r\n            case 'status':\r\n                for (i = 0; i < watchStatus.length; i++) {\r\n                    switch (value) {\r\n                        case watchStatus[i]:\r\n                            return <Dropdown.Item style={{borderLeft: COLORS_BORDER_LEFT_STATUS[i]}}\r\n                                                  eventKey={value}>{value}</Dropdown.Item>\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    // Handle setting state of dropdown items\r\n    const handleSelectRating = (e) => {\r\n        setRating(e)\r\n    }\r\n    const handleSelectStatus = (e) => {\r\n        setStatus(e)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!addedToList ?\r\n                <Modal\r\n                    {...props}\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                    centered\r\n                >\r\n                    <ModalHeader closeButton>\r\n                        <ModalTitle id=\"contained-modal-title-vcenter\">\r\n                            Add {props.movie.original_title} to your list?\r\n                        </ModalTitle>\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <Form>\r\n                            <Form.Label>Give your rating</Form.Label>\r\n                            <DropdownButton alignRight title={rating} id=\"dropdown-menu-align-right\"\r\n                                            onSelect={handleSelectRating}>\r\n                                {ratings.map(rating => setColorDropdownItems(rating, 'rating'))}\r\n                            </DropdownButton>\r\n                            <br/>\r\n\r\n                            <Form.Label>Watch status</Form.Label>\r\n                            <DropdownButton alignRight title={status} id=\"dropdown-menu-align-right\"\r\n                                            onSelect={handleSelectStatus}>\r\n                                {watchStatus.map(status => setColorDropdownItems(status, 'status'))}\r\n                            </DropdownButton>\r\n                        </Form>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button onClick={addMovieToList} variant=\"success\">Add to list</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n                :\r\n                <Modal\r\n                    {...props}\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                    centered\r\n                >\r\n                    <AlertMessage details={detailsAlertMessage}/>\r\n                </Modal>\r\n            }\r\n        </>\r\n    );\r\n} \r\n"]},"metadata":{},"sourceType":"module"}